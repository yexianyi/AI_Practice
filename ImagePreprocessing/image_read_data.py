import cv2
import numpy as np
import os

'''
使用numpy.array访问图像数据
'''
# 将BGR图像在(0,0)处的像素转化为白像素
img = cv2.imread('me.jpg')
img[0, 0] = [255, 255, 255]

print(img.item(150, 120, 0))  # 打印当前坐标点的蓝色值
img.itemset((150, 120, 0), 255)
print(img.item(150, 120, 0))

'''
操作通道：将指定通道（B,G,R）的所有值置为0.（注：通过循环来处理Python数组的效率非常低，应该尽量避免这样的操作。使用数组索引可以高效地操作像素。
像素操作是一个高代价的低效操作，特别是在视频数据处理时，会发现要等很久才能得到结果。可用索引(indexing)来解决该问题）
将图像所有的G（绿色）值设为0
'''
img[:, :, 1] = 0

"""
通过NumPy数组的索引访问原始像素，还可设定感兴趣区域(Region Of Interest, ROI)。一旦设定了该区域，就可以执行许多操作，
例如，将该区域与变量绑定，然后设定第二个区域，并将第一个区域的值分配给第二个区域（将图像的一部分拷贝到该图像的另一个位置）：
"""
roi = img[0:100, 0:100]
img[100:200, 100:200] = roi  # 此处需考虑所用图像的尺寸，不能超过，并确保两个区域的大小一样

"""
shape：NumPy返回包含宽度、高度和通道数（如果图像是彩色的）数组，这在调试图像类型时很有用；如果图像是单色或灰度的，将不包含通道值；
size：该属性是指图像像素的大小；
datatype：该属性会得到图像的数据类型（通常为一个无符号整数类型的变量和该类型占的位数，比如unit8类型）
"""
print(img.shape)
print(img.size)
print(img.dtype)

cv2.imshow('my image', img)
cv2.waitKey()
